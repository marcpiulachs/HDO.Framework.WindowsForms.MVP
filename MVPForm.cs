using System;
using System.Windows.Forms;

namespace HDO.Framework.WindowsForms.MVP
{
    /// <summary>
    /// This is the base class for Form based Views.
    /// </summary>
    public partial class MVPForm : Form , IDialogView
    {
        /// <summary>
        /// Holds a refernce to the presenter bindier for this view.
        /// </summary>
        private readonly PresenterBinder presenterBinder = new PresenterBinder();

        #region Events generated by the View

        public event EventHandler OnViewLoaded;
        public event EventHandler OnViewShown;
        public event EventHandler OnViewClosed;

        public event EventHandler OnViewAccepted;
        public event EventHandler OnViewCanceled;
        public event EventHandler OnViewActivated;

        #endregion

        /// <summary>
        /// Creates a new instance of the <see cref="MVPForm"/> class.
        /// </summary>
        public MVPForm()
        {
            InitializeComponent();

            // Attach the presenter binding
            presenterBinder.PerformBinding(this);
        }

        protected override void OnHandleCreated(EventArgs e)
        {
            base.OnHandleCreated(e);

            if (DesignMode)
                return;

            if (OnViewLoaded != null)
                OnViewLoaded(this, EventArgs.Empty);
        }

        protected override void OnHandleDestroyed(EventArgs e)
        {
            base.OnHandleDestroyed(e);

            if (DesignMode)
                return;

            if (OnViewClosed != null)
                OnViewClosed(this, EventArgs.Empty);
        }

        private void MVPForm_Load(object sender, EventArgs e)
        {
            //if (OnViewLoaded != null)
            //    OnViewLoaded(this, EventArgs.Empty);
        }

        private void MVPForm_Shown(object sender, EventArgs e)
        {
            if (OnViewShown != null)
                OnViewShown(this, EventArgs.Empty);
        }

        private void MVPForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            //if (OnViewClosed != null)
            //    OnViewClosed(this, EventArgs.Empty);
        }

        public bool CanAccept()
        {
            return true;
        }

        public bool CanCancel()
        {
            return true;
        }

        /// <summary>
        /// Accept current dialog.
        /// </summary>
        public void Accept()
        {
            if (!CanAccept())
                return;

            DialogResult = DialogResult.OK;

            if (OnViewAccepted != null)
                OnViewAccepted(this, EventArgs.Empty);
        }

        /// <summary>
        /// Cancel current dialog.
        /// </summary>
        public void Cancel()
        {
            if (!CanCancel())
                return;

            DialogResult = DialogResult.Cancel;

            if (OnViewCanceled != null)
                OnViewCanceled(this, EventArgs.Empty);
        }

        private void MVPForm_Activated(object sender, EventArgs e)
        {
            if (OnViewActivated != null)
                OnViewActivated(this, EventArgs.Empty);
        }

        private void MVPForm_Enter(object sender, EventArgs e)
        {
            if (OnViewActivated != null)
                OnViewActivated(this, EventArgs.Empty);
        }

        public virtual bool IsValid()
        {
            return true;
        }
    }
}